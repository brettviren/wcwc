#+title: BNL WCWC
#+setupfile: wcwc-setup.org

* meta :noexport:

#+begin_src elisp :results none
(setenv "PATH" (concat (getenv "PATH") ":" (expand-file-name "../scripts")))
#+end_src

#+begin_src sh :results output drawer
scp wcwc-bnl.html hierocles.phy.bnl.gov:public_html/wire-cell/docs/
#+end_src

#+RESULTS:
:results:
:end:



* Introduction
:PROPERTIES:
:CUSTOM_ID: intro
:END:

This document uses terms from and extends [[file:wcwc.org]] with BNL-specific information.  In particular, review that document for definitions of *local*, *remote, internal*, *external*, etc.  Unless stated otherwise, WCWC refers here to the BNL instance.  The first section describes user and workstation enrollment in the BNL WCWC.  Then sections with specific information intended for BNL WCWC users and admins, respectively.  Specifications follow [[https://www.ietf.org/rfc/rfc2119.txt][RFC 2119]] language.

The WCWC project has all (meta) files in the [[https://github.com/brettviren/wcwc][brettviren/wcwc]] GitHub repo.  Users of general WCWC features or the BNL WCWC instance are encouraged to report problems via that repository's GitHub Issues.  Any problems specific to non-BNL WCWC instances, should be reported elsewhere.

* Enrollment
:PROPERTIES:
:CUSTOM_ID: enroll
:END:

** Workstation enrollment
:PROPERTIES:
:CUSTOM_ID: enroll-workstation
:END:

Enrollment of a workstation into the BNL WCWC is initiated by its BNL custodian ("owner") or a designee.  These steps shall be followed:

- Owner contacts the BNL WCWC admin to discuss any special needs for the workstation and or user(s) it brings along.
  - Remaining steps may be performed by the owner or with negotiation by the BNL WCWC admin.
- A supported OS is installed (see section [[#os]])
- The OS is configured to use a static IP address that has been allocated from BNL ITD.
- A copy of the [[https://www.phy.bnl.gov/~bviren/wire-cell/docs/wcwc.pub][BNL WCWC admin SSH public]] keys is placed in ~/root/.ssh/authorized_keys~.
#+begin_note
These requirements are for *member workstations*.  WCWC users need not enroll a workstation in order to use the WCWC.  The only requirement for non-member computers is to provide the user an SSH client.
#+end_note


** User enrollment
:PROPERTIES:
:CUSTOM_ID: enroll-user
:END:

Every user must perform these tasks to enroll in the BNL WCWC:
- Obtain a [[https://www.phy.bnl.gov/Accounts/][Physics department SSH account]].
- Determine the home provider workstation.
- User and admin coordinate on adjusting account IDs (see section [[#home-provider-uid]])

** Supported operating systems
:PROPERTIES:
:CUSTOM_ID: os
:END:

BNL WCWC currently supports the Debian version 12 distribution of GNU/Linux (aka "stable" aka "bookworm").  BNL WCWC workstations will be upgraded to Future releases of Debian in coordination with the workstations custodians and WCWC users.


* User
:PROPERTIES:
:CUSTOM_ID: user
:END:

This section provides guidance specifically for users of the BNL WCWC.  See also [[file:wcwc.org::#user]].

** Software packages
:PROPERTIES:
:CUSTOM_ID: software-packages
:END:

A goal of WCWC is to provide all software a user needs in a form that is consistent across all workstations in the cluster.  Such software is provided either by OS packages or by Spack.
If you need some software follow these guidelines to find/get it:

- Check what is installed on OS or Spack:
  #+begin_example
  $ dpkg -l | grep name

  $ wcwc find | grep name
  #+end_example
- Check what could be installed on OS or Spack:
  #+begin_example
  $ apt-cache search name

  $ wcwc list              # base spack stack
  # wcwc list -S wirecell  # a dependent stack
  #+end_example
- Contact the WCWC admin for assistance by providing package names and any version constraints.  If software is not in OS or Spack or the available versions are not sufficient, there is some chance Spack packaging can be developed.  User involvement in that packaging process is encouraged but not required.

Some software is out of scope to be provided by WCWC OS or Spack.
- Copies of software under development by the user (but see [[file:wcwc.org::#devel]]).
- Proprietary software (at least in general, special cases may be considered).


** Remote access
:PROPERTIES:
:CUSTOM_ID: remote-access
:END:


Remote access is when you the user are sitting at some *local* computer which may be *internal* to the wired BNL campus LAN or maybe *external* on a BNL wireless or non-BNL network and you wish to access a *remote, internal* WCWC account.
To allow for transparent remote access across different local accounts, you are recommended to implement the guidance in this section.

As one example, place the following text at the top of =~/.ssh/config= file and replace ~WCWCUSER~ with your WCWC user name:
#+begin_example
Host *.phy
	User WCWCUSER
	ProxyJump WCWCUSER@ssh.phy.bnl.gov
    Hostname %h.bnl.gov
	ControlMaster auto
	ControlPath ~/.ssh/%r@%h:%p
	ControlPersist 10m
	ForwardAgent yes
	ForwardX11 yes
	PreferredAuthentications publickey
	ServerAliveInterval 60

Host *.phy.bnl.gov
	User WCWCUSER
	ProxyJump none
	ControlMaster auto
	ControlPath ~/.ssh/%r@%h:%p
	ControlPersist 10m
	ForwardAgent yes
	ForwardX11 yes
	PreferredAuthentications publickey
	ServerAliveInterval 60
#+end_example
#+begin_note
This configuration will work when used in both *internal* and *external* accounts.  However, it relies on the you the user to use a host name like ~wcgpu1.phy~ when a jump through the SSH gateway is needed and ~wcgpu1.phy.bnl.gov~ when it isn't.  See below for more advanced configuration that allow for transparent access regardless of what network the local account resides.
#+end_note

Next, assure your *local* shell has access to an ~ssh-agent~ and that the agent has been loaded with SSH keys.  A good desktop environment (DE) will have started an ~ssh-agent~ for you.  You can check with:

#+begin_example
$ ssh-add -l
#+end_example

If that responds with:
#+begin_example
$ ssh-add -l
Could not open a connection to your authentication agent.
#+end_example
then you must either fix your DE or manually start an agent at the shell level:
#+begin_example
$ ssh-agent /bin/bash
#+end_example

If ~ssh-add -l~ responds with:
#+begin_example
$ ssh-add -l
The agent has no identities.
#+end_example
then you need to load your SSH private keys:

#+begin_example
$ ssh-add
Enter passphrase for /home/bv/.ssh/id_rsa: 
Identity added: /home/bv/.ssh/id_rsa (/home/bv/.ssh/id_rsa)
$ ssh-add -l
4096 SHA256:m0bjsB5xmh0hHqs927+hvi94Vhsdi0e5DArl+36qa4s /home/bv/.ssh/id_rsa (RSA)
#+end_example
If your SSH key files have non-standard file names, simply list them on the ~ssh-add~ command line (they lack the ~.pub~ file name extension).

You can now make an unlimited chain of SSH connections starting from your local computer and on to any number of WCWC workstation accounts.
#+begin_example
bv@local$ ssh hierocles.phy
bviren@hierocles$ ssh wcgpu1.phy.bnl.gov
bviren@wcgpu1$
#+end_example
#+begin_note
We used the short alias ~wcgpu1.phy~ that matches the ~*.phy~ given in the first ~Host~ line of =~/.ssh/config= in order to jump through the SSH gateway as ~hierocles~ is already *internal*.  After that, real host names may be used.  If the workstation has proper DNS configuration (~search~ and ~domain~) then the simple hostname may be used (eg ~ssh wcgpu1~).
#+end_note

** Advance remote access
:PROPERTIES:
:CUSTOM_ID: advanced-remote-access
:END:


The above =~/.ssh/config= suffers from requiring the user to use different host names when the local computer is on different networks.  There are a few ways to add network transparency to the configuration.  One such way is the following:
#+begin_example
Host *.bnl.gov
        User WCWCUSER
        ControlMaster auto
        ControlPath ~/.ssh/%r@%h:%p
        ControlPersist 10m
        Hostname %h
        ForwardAgent yes
        ForwardX11 yes
        PermitLocalCommand yes
        PreferredAuthentications publickey
        ServerAliveInterval 60

# Avoid loop, do not proxy jump when going to an SSH gateway
Match originalhost ssh.phy.bnl.gov 
        ProxyJump none
Match originalhost physsh.phy.bnl.gov 
        ProxyJump none
Match originalhost gateway.phy.bnl.gov 
        ProxyJump none
# But otherwise proxy jump.  Note, ssh.phy.bnl.gov is only in external BNL DNS.
Match originalhost *.phy.bnl.gov !Exec "ip route get 1 | grep -q 130.199.22.24"
        ProxyJump WCWCUSER@ssh.phy.bnl.gov
#+end_example
While the user is suggested to try this advanced configuration if they wish to have the same =~/.ssh/config= in both internal and external accounts, the rest of this document will assume the configuration in section [[#remote-access]].

#+begin_note
The ~Match~ keyword requires OpenSSH ca. version 6.5 and the "new style" ~ip~ command to work on the local computer.
#+end_note

** Troubles
:PROPERTIES:
:CUSTOM_ID: ssh-troubles
:END:


*** I can't log into the SSH gateway

Do you have an account? https://www.phy.bnl.gov/Accounts/

Do you have an ~ssh-agent~ started?
#+begin_example
$ ssh-add -l
Could not open a connection to your authentication agent
$ ssh-agent /bin/bash
#+end_example

Do you have an ~ssh-agent~ but no keys?
#+begin_example
$ ssh-add -l
The agent has no identities.
$ ssh-add
Enter passphrase for /home/USER/.ssh/id_rsa: 
Identity added: /home/USER/.ssh/id_rsa (/home/USER/.ssh/id_rsa)
$ ssh-add -l
4096 SHA256:<fingerprint> /home/USER/.ssh/id_rsa (RSA)
#+end_example
The key must be the one provided when getting the SSH gateway account.

*** I can not log into a WCWC workstation

Do you have an ~ssh-agent~ started and loaded with your keys (see above)?

Are you starting from an external account?  Then, see above for ~ssh-agent~ info and be sure to forward it:
#+begin_example
l$ ssh -A USER@ssh.phy.bnl.gov
g$ ssh -A USER@workstation.phy.bnl.gov
w$
#+end_example

Do you need to use a private key other than what is loaded into Physics dept IDM and you have access to the WCWC ~$HOME~ (eg you sit at a WCWC workstation and want to access another).  You must authorize the key in your own account:
#+begin_example
$ cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
#+end_example

Do you need to use a private key other than what is loaded into Physics dept IDM and you do not have access to your WCWC ~$HOME~ (eg your use WCWC in "homeless" mode)?
Contact the WCWC admin.



* Developer
:PROPERTIES:
:CUSTOM_ID: developer
:END:

** Become friends with GPUs
:PROPERTIES:
:CUSTOM_ID: gpu-friends
:END:


See what (nVidia) GPUs are available:
#+begin_example
$ nvidia-smi
#+end_example
Probe with PyTorch
#+begin_example
$ wcwc shell -l "py-torch+cuda cuda_arch=89"
$ python -c 'import torch; print(torch.cuda.is_available())'
True
$ python -c 'import torch; print(torch.cuda.device_count())'
2
#+end_example
#+begin_note
If you see error like: 

~UserWarning: CUDA initialization: CUDA unknown error - this may be due to an incorrectly set up environment, e.g. changing env variable CUDA_VISIBLE_DEVICES after program start. Setting the available devices to be zero.~

Tell your WCWC admin to check if ~nvidia_uvm~ kernel module has become unloaded.
#+end_note

* Admin
:PROPERTIES:
:CUSTOM_ID: admin
:END:


This section describes specifics about administrating up WCWC workstations with a focus on initial setup into the BNL Physics department identity management (IDM) system (FreeIPA).

** Workstation prerequisites
:PROPERTIES:
:CUSTOM_ID: admin-prereq
:END:


Prior to enrollment a potential WCWC workstation must be:
- running a supported and up-to-date operating system.
- available via a static IP address allocated from BNL networking.
- configured with the WCWC admin keys in ~/root/.ssh/authorized_keys~.

** Hostname
:PROPERTIES:
:CUSTOM_ID: admin-hostname
:END:

The ~hostname~ command must resolve to a fully-qualified host name.  This can be assured with:

#+begin_example
  # hostname <host>.phy.bnl.gov
  # echo <host>.phy.bnl.gov > /etc/hostname
#+end_example


** Basic configuration
:PROPERTIES:
:CUSTOM_ID: ansible
:END:

- The enrolling workstation shall be given a baseline configuration via Ansible.

The WCWC admin runs:

#+begin_example
  1$ cd ~/dev/wcwc
  2$ emacs ansible/inventory.yml
  3$ ansible workstations -m ping -l <hostname>.phy.bnl.gov
  4$ ansible-playbook -l <hostname>.phy.bnl.gov' ansible/playbooks/wcwc-workstation.yml
#+end_example
1. Enter the source providing Ansible and configured via ~direnv~
2. Add the fully qualified host name to the inventory
3. Test it is accessible
4. Apply the baseline configuration



** User accounts
:PROPERTIES:
:CUSTOM_ID: bnl-accounts
:END:

- A WCWC user must control a "distributed" BNL Physics Department SSH account from https://www.phy.bnl.gov/Accounts/.
- A WCWC user may control a "local" account on zero or more WCWC workstations.

Note, the distributed account system is provided by an instance of the FreeIPA IDM which also includes features to configure WCWC services.  The text will refer to this service as "IDM".

** Migrating a pre-existing ~/home~
:PROPERTIES:
:CUSTOM_ID: local-accounts
:END:

Local account ~$HOME~'s need adjusting if the workstation is a home provider or it will automount ~/home~.  Existing

- The directory ~/nfs/home~ must exist and be populated with any local ~$HOME~ directories.
- A preexisting direct-mount ~/home~ must have its ~/etc/fstab~ adjusted to mount the partition to ~/nfs/home~
- A preexisting non-direct-mount ~/home~ must be moved to ~/nfs/home~.
- The ~/home~ must exist and be empty prior to enrollment.


** Add user to IDM
:PROPERTIES:
:CUSTOM_ID: freeipa-add-user
:END:

A users distributed identity must be added to the WCWC group in FreeIPA:

1. ~Identity~ -> ~Users~ -> ~username~
2. ~User Groups~, ~+Add~ and add to ~wcwc~.
   
A user's ~$HOME~ must be added to the automount map:

1. ~Network services~ -> ~Automount~ -> ~wcwc-u~ -> ~auto.u~ -> ~+Add~
2. The ~Key~ is the username
3. the ~Mount information~ is as follows, replacing ~WORKSTATION~ with the fully-qualified name of the workstation

#+begin_example
-fstype=nfs4 -sync,rw,soft,sec=sys,proto=tcp,port=2049 WORKSTATION:/home/&
#+end_example

Internally, FreeIPA assigns large user (and group) ID numbers while we wish to keep the BNL "life" number used at the OS level.  To allow this an "ID View" is needed for each user:

1. ~Identity~ -> ~ID Views~ -> ~wcwc~ -> ~Users~ -> ~+Add~ 
2. Fill in the user name and matching user login, desired UID matching GID, shell and home directory (~/home/USER~).
3. SAVE

** Enroll workstation in the IDM 
:PROPERTIES:
:CUSTOM_ID: freeipa-enroll-host
:END:

To enroll a workstation, the WCWC admin must issue these commands as user root.

#+begin_example
  # ipa-client-install \
    --server=idm3.phy.bnl.gov \
    --server=idm2.phy.bnl.gov \
    --server=idm1.phy.bnl.gov \
    --server=idm.phy.bnl.gov \
    --domain=phy.bnl.gov
  # ipa-client-automount --server=idm.phy.bnl.gov --location=wcwc-u
#+end_example
Notes:
- Ignore message ~conflicting time&date synchronization service 'ntp' will be disabled in favor of chronyd~
- Answer "yes" to ~Proceed with fixed values and no DNS discovery?~
- Answer "yes" to ~Do you want to configure chrony...~
- May skip entering of NTP sources.
- Enter authorized user credentials (WCWC admin) 


** Configure host to IDM
:PROPERTIES:
:CUSTOM_ID: freeipa-add-host
:END:

The WCWC admin must perform these settings via the FreeIPA IDM web interface:

1. ~Identity~ -> ~Hosts~ -> ~hostname.phy.bnl.gov~.
2. Add primary owner's real name and other general info about the workstation in description and *Save*.
3. In the ~Host Groups~ tab, ~+Add~, add the host to the group ~wcwc-workstations~.
4. ~Identity~ -> ~ID Views~ -> ~wcwc~ -> ~Hosts~ -> ~+Apply to host groups~ -> ~wcwc-workstations~

Note, this last command will try to re-add all previously added hosts.  This throws harmless errors.  The issue is FreeIPA does not support adding a host group per se but rather the Hosts list here is flat.  One may instead ~+Apply to hosts~ and select individual hosts to add.

This may be required to finally get correct IDs:
#+begin_example
  # service sssd restart
  # getent passwd bviren
  bviren:*:22351:22351:Brett Viren:/home/bviren:/usr/bin/fish
#+end_example

** UID on ~$HOME~ provider
:PROPERTIES:
:CUSTOM_ID: home-provider-uid
:END:

- A WCWC user's ~$HOME~ must NFS-exported by a WCWC or non-WCWC "home provider" workstation.
- A WCWC workstation shall have ~/home~ as an automount volume controlled by a map in IDM as detailed next.
- The user ID number for ~$HOME~ NFS-exported by any home provider (WCWC or non-WCWC) must be made unique according to the WCWC schema and the ownership and permission of user's files modified to reflect that.
- The ID for a user that is a BNL employee must be  equal to the employee (aka "life") number.
- The ID for a user that is a BNL guest is formed by taking the last 4 digits of the guest number and prepending it with ~L - 'A' + 1~ where "~L~" is the prefix letter expressed in ASCII and "~'A'~" is the ASCII encoding for "A".

  In order to migrate to a new user ID number the user must logout of the workstation and otherwise kill any running process.  As user ~root~
#+begin_example
  # groupmod -g NEWGID GROUPNAME  
  # usermod  -g NEWGID -u NEWUID USERNAME
#+end_example
The ~usermod~ command will change permissions of files in the user's ~$HOME~ but not elsewhere.  To list top-level directories owned by the old user ID run:
#+begin_example
  find / -type d -user OLDUID -prune 2>/dev/null
#+end_example
One may then change ownership for each directory listed.
#+begin_example
  chown --from=CURRENT_OWNER:CURRENT_GROUP -R NEW_OWNER:NEW_GROUP DIRECTORY
#+end_example


** ~$HOME~ for the homeless
:PROPERTIES:
:CUSTOM_ID: home-for-homeless
:END:

A "homeless" user is one that does not have their "own" workstation to provide ~$HOME~.  They will be assigned a home provider by the WCWC admin.  Likely this will be ~lycastus~, the ~/wcwc~ NFS-server.  This host is not a NFS-client thus effectively not available for user login.

#+begin_note
Adding a "homeless" user requires variant of what is described in section [[#freeipa-add-user]].
#+end_note

1. FreeIPA: Identity -> User -> username -> User Groups -> +Add -> add to "wcwc".
2. FreeIPA: Identity -> ID Views -> ~wcwc~ -> Users -> +Add -> Add user ID override (user, login, uid, gid, shell, home)
3. FreeIPA: Network Services -> wcwc-u -> auto.u -> +Add -> key: username, mount: 
#+begin_example
-fstype=nfs4 -sync,rw,soft,sec=sys,proto=tcp,port=2049 lycastus.phy.bnl.gov:/home/&
#+end_example
4. Creating the physical (not actual) home:
#+begin_example
  # mkdir -p /nfs/home/USER
  # cp /etc/skel/.* /nfs/home/USER/
  # chown -R USER:USER /nfs/home/USER/
#+end_example
5. Check on NFS-client:
#+begin_example
  $ getent passwd USER
  $ ls -la /u/USER
  $ ls -la /home/USER 
#+end_example   


** Annexed ~$HOME~ provider

A workstation which is not yet a member of WCWC may be "annexed" to supply the ~$HOME~ for a user which is a member.  This requires manual configuration of the annexed workstation some of which must be undone if/when the workstation later becomes a full WCWC member.  Much of this configuration is in common with what must be done on a WCWC workstation except we will not automount WCWC ~$HOME~ and will leave the native ~/home~ in place.

Here are the steps to take, assuming a Debian-like system.

1. Adjust UID as in section [[#home-provider-uid]].
2. ~apt install nfs-kernel-server~
3. ~mkdir -p /nfs/home~
4. Add ~/home /nfs/home none bind 0 0~ to ~/etc/fstab~
5. One time ~mount /nfs/home~
6. Configure NFS with following in ~/etc/exports~
#+begin_example
  /nfs		130.199.22.0/23(rw,sync,crossmnt,no_subtree_check,fsid=0)
  /nfs/home	130.199.22.0/23(rw,sync,no_subtree_check)
#+end_example
7. [@7] One time  ~exportfs -av~ and ~showmount -e~ to check.
8. FreeIPA: Identity -> User -> username -> User Groups -> +Add -> add to "wcwc".
9. FreeIPA: Identity -> ID Views -> ~wcwc~ -> Users -> +Add -> Add user ID override (user, login, uid, gid, shell, home)
10. FreeIPA: Network Services -> wcwc-u -> auto.u -> +Add -> key: username, mount: 
#+begin_example
-fstype=nfs4 -sync,rw,soft,sec=sys,proto=tcp,port=2049 ANNEXED.phy.bnl.gov:/home/&
#+end_example



** Debugging autofs
:PROPERTIES:
:CUSTOM_ID: debug-autofs
:END:


The use of autofs to NFS-mount ties together several things.
- Adding a user's ~$HOME~, see section [[#freeipa-add-user]].
- Setting up a home provider, see section [[#home-provider-uid]].
- Assuring the host is an ~ipa-client-automount~, see section [[#freeipa-enroll-host]].
- Assuring ~auto_home.sh~ script exists. (run ansible playbook).

On NFS-client, the *basic check* is:
#+begin_example
ls -ld /u/USER /home/USER  ### show correct ownership by name
ls -ldn /u/USER /home/USER ### show ownership by "short" user ID
#+end_example
Both should exist on any WCWC workstation, except special case of the home provider for the "homeless" (users with no workstation of their own).

If they do not exist we go end to end starting at the NFS server:

On NFS-server, does the user account exist and with "short" user ID?
#+begin_example
getent passwd USER 
#+end_example

On NFS-server, does the the physical (not actual) home directory exists?
#+begin_example
ls -la /nfs/home/USER
#+end_example
If it is missing then create it according to section [[#home-for-homeless]].

On NFS-server, is ~/nfs/home~ exported?
#+begin_example
  # showmount -e
#+end_example
If not, check ~/etc/exports~.  Changing that requires:
#+begin_example
  # exportfs -ua
  # exportfs -av   ### -v to check
  # showmount -e   ### to double check
#+end_example
Assure ~/nfs/home~ is exported to the LAN subnet.

On NFS-client, check direct NFS-mount:
#+begin_example
  # mount -t nfs4 lycastus.phy.bnl.gov:/home /mnt
  # ls -l /mnt     ### see any homes?
  # umount /mnt
#+end_example
If not, perhaps NFS-server or NFS-client has a local firewall interfering.

On NFS-client, check autofs is working.  After any change to IDM related to autofs, services may need restarting: 
#+begin_example
  # service sssd restart
  # service autofs restart
#+end_example

On NFS-client, check that autofs knows the maps
#+begin_example
  # automount --dumpmaps
#+end_example
Should see:
- ~/wcwc~ in ~auto.direct~ map
- ~/home~ in ~auto_home.sh~ map
- ~/u~ in ~auto.u~ map
If missing, then make corrections in FreeIPA.

On NFS-client, check that the "program" map script exists and works:
#+begin_example
  # /etc/auto_home.sh USER
#+end_example
This should return ~:/nfs/home/USER~ when run on the home-provider otherwise it should return ~/u/USER~.

On NFS-client, check that the intermediate automount works:
#+begin_example
  # ls -ld /u/USER
#+end_example

And, finally, assure end result
#+begin_example
  # ls -ld /home/USER
#+end_example



** Walk throughs
:PROPERTIES:
:CUSTOM_ID: walk-thru
:END:

*** wcgpu1
:PROPERTIES:
:CUSTOM_ID: walk-thru-wcgpu1
:END:

This is one of 2 dual-GPU "workstations".  They are integrated as "normal" workstations except that they are not home providers.  Here we walk through section [[#ansible]].

#+begin_example
$ ssh root@wcgpu1.bnl
root@wcgpu1:~# hostname
wcgpu1.phy.bnl.gov

local$ ssh hierocles.bnl
internal$ ansible workstations -m ping -l wcgpu1.phy.bnl.gov
internal$ ansible-playbook -l 'wcgpu1.phy.bnl.gov' ansible/playbooks/wcwc-workstation.yml
#+end_example

Following section [[#local-accounts]].

#+begin_example
root@wcgpu1:~# mkdir -p /nfs/home
root@wcgpu1:~# emacs -nw /etc/fstab  # change /home to /nfs/home
root@wcgpu1:~# mount /nfs/home
#+end_example
No new WCWC users associated with ~wcgpu*~ so skip section [[#freeipa-add-user]] and continue to section [[#freeipa-enroll-host]] performing both client install and automount commands and then section [[#freeipa-add-host]].
#+begin_example
  # service sssd restart
  # service autofs restart
  # getent passwd bviren
  bviren:*:22351:22351:Brett Viren:/home/bviren:/usr/bin/fish
  # ls -ld /home/bviren/
  drwxr-xr-x 62 bviren bviren 4096 Aug 20 05:57 /home/bviren/
  # ls -lnd /home/bviren/
  drwxr-xr-x 62 22351 1601400019 4096 Aug 20 05:57 /home/bviren/
  # ls -l /wcwc/spack/bin/spack
  -rwxr-xr-x 1 1001 1001 1765 Aug 16 11:52 /wcwc/spack/bin/spack

  $ ssh wcgpu1.bnl # full login check
  
#+end_example
Again, as this is not a home provider, the rest of the steps above are skipped and we are done.

Some todo items for ~wcgpu*~

- [ ] move static IP from DE config to ~/etc/network/interfaces~
- [ ] purge DE packages



** Internal data
:PROPERTIES:
:CUSTOM_ID: internal-data
:END:

TBD: how to share more than ~$HOME~.

** External data
:PROPERTIES:
:CUSTOM_ID: external-data
:END:

TBD: how to access eg FNAL or SDCC storage.

** Build host
:PROPERTIES:
:CUSTOM_ID: build-host
:END:


Typically, package building is performed in an account (~wcwc@wcgpu0~) on a faster host than the ~/wcwc~ NFS provider (~lycastus~).  As the ~/wcwc~ is mounted read-only, a writable copy is made in a non-canonical location, a state change is applied and the results returned.
#+begin_example
$ rsync -av wcwc@lycastus.phy.bnl.gov:/wcwc/ ~/wcwc-dev/  
$ wcwc --prefix=$HOME/wcwc-dev admin install <spec>
$ rsync -av ~/wcwc-dev/  wcwc@lycastus.phy.bnl.gov:/wcwc/
#+end_example


** External sync host
:PROPERTIES:
:CUSTOM_ID: sync-host
:END:


A home workstation or laptop or other computers that do not NFS-mount ~/wcwc~ may maintain a copy by periodically syncing with the central ~/wcwc~.

#+begin_example
wcwc@haiku:~$ rsync --del -a lycastus.bnl.phy.gov:/wcwc/ /wcwc/
#+end_example

The sync can be against any WCWC workstation.  To avoid extra network traversal, this example goes to the horses mouth but any workstation NFS_mounting ~/wcwc~ can also work.  If the user wishes to extend the local copy beyond what is on WCWC, they should omit the ~--del~ option.  Modifying the local copy entail commands as illustrated in section [[#build-host]].



** Misc checks

Desktop machines may be configured to suspend when they are idle and sitting at GDM login.  To defeat this, edit ~/etc/gdm3/greeter.dconf-defaults~ to set these bits:
#+begin_example
[org/gnome/settings-daemon/plugins/power]
sleep-inactive-ac-type='nothing'
sleep-inactive-battery-timeout=0
#+end_example
And
#+begin_example
  # systemctl restart gdm3
  # systemctl restart gdm
#+end_example

** Installing and developing packages

Spack state modifications are performed on a read-write *copy* of ~/wcwc~.  To make the copy:
#+begin_example
$ rsync wcwc@lycastus.phy.bnl.gov:/wcwc/ ~/wcwc-dev/
#+end_example
To return changes:
#+begin_example
$ cat ~/bin/wcwc-sync 
rsync -av \
  --exclude "*~" --exclude __pycache__ --exclude stage --exclude cache ~/wcwc-dev/ \
  wcwc@lycastus.phy.bnl.gov:/wcwc/
#+end_example

While it is possible to directly edit files under =~/wcwc-dev/= any installation and use of packages must be done inside a container:
#+begin_example
u$ wcwc --image=yes --prefix=$HOME/wcwc-dev shell
s$ ls /wcwc
opt  spack  stacks  stage  wcwc.db  wcwc.yaml
s$ spack install [...]
#+end_example
Or, better use ~wcwc admin~ (which enforces the container):
#+begin_example
$ wcwc --prefix=$HOME/wcwc-dev admin install [...]
#+end_example
The container must also be used to exercise a locally installed package:
#+begin_example
$ wcwc --image=yes --prefix=$HOME/wcwc-dev admin shell -l <package>
# or
$ wcwc --image=yes --prefix=$HOME/wcwc-dev admin shell -S wirecell -l <package-in-wirecell>
#+end_example

When state changes applied to =~/wcwc-dev/= are complete, "commit" them by rsync'ing back:
#+begin_example
$ ./bin/wcwc-sync
#+end_example

#+begin_note
In the future, the sync parts of this workflow may become incorporated into ~wcwc~.
#+end_note
