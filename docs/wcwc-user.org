#+title: The Wire-Cell Workstation Cluster for Users
#+setupfile: ~/org/setup.org
#+setupfile: ~/org/setup-topic.org
#+setupfile: ~/org/setup-darksun.org
#+options: toc:t

* meta :noexport:

#+begin_src elisp :results none
(setenv "PATH" (concat (getenv "PATH") ":" (expand-file-name "../scripts")))
#+end_src


* Introduction
:PROPERTIES:
:CUSTOM_ID: intro
:END:

This document describes how you can use the Wire-Cell workstation cluster (WCWC).  We describe how to incorporate your workstation into a WCWC and then how to benefit from WCWC membership.  In order to remain brief we provide a single, /opinionated/ way to use WCWC while a creative user should know that WCWC supports other usage patterns.  We also describe WCWC with references to its implementation on the BNL campus network.  Other institutions may replicate WCWC on their LAN.

Many of the workflows described here are provided by the ~wcwc~ command may be downloaded from https://github.com/wirecell/wcwc and placed in your ~$PATH~.  Run ~wcwc~ with no arguments to get usage information.  That repository also provides this document and collects other files related to WCWC.

#+begin_note
You will find related but not essential additional information in notes such as this one.
#+end_note


* User workstation configuration
:PROPERTIES:
:CUSTOM_ID: user-config
:END:

In this section we describe the tasks required for your workstation to gain membership to WCWC.

** Network connectivity

Assure your workstation meets these network connectivity criteria:

- If you wish to NFS-mount the WCWC software volume, your workstation must reside on a LAN with the WCWC NFS-server.  Otherwise, your workstation may be able to use ~rsync~ to maintain a copy of WCWC software.

- If you wish to the WCWC admin to assist in configuring your workstation or if you wish to NFS-mount your home directory to other WCWC systems on the shared LAN your workstation must have a static IP address.  Contact your network administrators to request a static IP.

** Operating system 
:PROPERTIES:
:CUSTOM_ID: user-os
:END:

A WCWC user workstation must run a supported OS.  The supported OSes may be listed with:

#+begin_src shell :results list :exports both
wcwc list-oses
#+end_src

#+RESULTS:
: - Debian GNU/Linux 12 (bookworm)

You can see what your workstation runs with:

#+begin_src shell :results none :exports code :noeval
lsb_release -ds
#+end_src

** WCWC administrator access

After assuring the OS is from the list of those supported and the workstation has a static IP address you may request assistance from your WCWC admin to perform additional configuration.  To enable access, append the public SSH keys provided by your WCWC admin to:

#+begin_example
/root/.ssh/authorized_keys
#+end_example

#+begin_note
The BNL WCWC admin keys are here:

https://www.phy.bnl.gov/~bviren/wire-cell/docs/wcwc.pub

Non-BNL WCWC systems should not install them.
#+end_note

** OS Packages

At least the following OS packages are required:
#+begin_example
sudo apt-get install nfs-common rsync direnv \
    build-essential ca-certificates coreutils curl environment-modules \
    gfortran git gpg lsb-release python3 python3-distutils python3-venv \
    unzip zip openssh-server openssh-client
#+end_example

** WCWC software area
:PROPERTIES:
:CUSTOM_ID: spack-soft
:END:

Software is provided as a Spack installation.  A WCWC client may access the software either by an NFS-mount or an rsync copy.  The standard location on the client is ~/wcwc~ though alternatives may be used.  Subsequent examples assume the default and BNL WCWC specifics.

*** NFS mount

As root user, add this line to your ~/etc/fstab~ file:
#+begin_example
lycastus.phy.bnl.gov:/wcwc /wcwc nfs4 _netdev,auto  0  0
#+end_example
Perform this further, one time action:
#+begin_example
mkdir /wcwc
mount /wcwc
#+end_example
In the future ~/wcwc~ should be mounted automatically at boot.

*** Rsync copy

If you are unable or unwilling to use NFS mount you may use ~rsync~ to periodically freshen a copy of the WCWC area.  
#+begin_example
rsync --del -a <name>:/wcwc/ /wcwc/
#+end_example

#+begin_note
In the example, ~<name>~ refers to a stanza in the user's ~.ssh/config~ that describes how to access a WCWC workstation that provides ~/wcwc~.  Take care to include trailing slashes (~/~).
#+end_note

** NFS-export home directory

t.b.d.

* Software usage
:PROPERTIES:
:CUSTOM_ID: user-software
:END:

You may use WCWC software in any manner supported by Spack.  Spack documentation is very good and should be read.  Here, we briefly outline.

** Spack shell environment
:PROPERTIES:
:CUSTOM_ID: spack-env
:END:

An end-user (not developer) may wish to use Spack Environment Modules to configure their shell environment to use some package.  This is a two step processes.

*** Internalize spack to your shell
:PROPERTIES:
:CUSTOM_ID: spackify
:END:


Find the Spack shell "setup" script matching your shell:
#+begin_example
ls /wcwc/spack/base/repo/share/spack/setup-env.*
#+end_example
Source the one that matches your shell.  The ~wcwc~ command can also help to discover the right script.
#+begin_example
wcwc spack-setup
source `wcwc spack-setup`
#+end_example
This causes the ~spack~ command to become a shell function.

To avoid mutating your current shell environment you may wish to start a new one:
#+begin_example
bash --rcfile `wcwc spack-setup -s bash`
#+end_example

*** Loading an environment module

After internalizing Spack environment as in section [[#spackify]] you may further modify your shell environment to make use of various software packages in a piecemeal manner using Spack's support for [[https://modules.readthedocs.io/][Environment Modules]].
#+begin_example
$ spack load root
$ root --version
ROOT Version: 6.30/06
Built for linuxx8664gcc on Jun 04 2024, 20:14:19
From heads/master@tags/v6-30-06
$ spack unload root
#+end_example

#+begin_note
When Spack provides more than one instance of a particular package you must uniquely qualify which to load by providing a more detailed Spack *spec* instead of just a simple package name.  

To discover all installed instances of a package and their qualifiers use, for example the command ~spack find root~.  See the Spack [[https://spack.readthedocs.io/en/latest/basic_usage.html#sec-specs][Basic Usage manual]] and Spack "spec" [[https://spack.readthedocs.io/en/latest/spack.html#module-spack.parser][reference docs]] for more info on how to provide a Spack *spec*.
#+end_note

** Spack Environments
:PROPERTIES:
:CUSTOM_ID: spack-envs
:END:

Spack Environments provide a persistent and more sophisticated way to specify your shell environment configuration than do the similarly named Spack Environment Modules.  They come in two types with different policy: personal and shared.

*** Personal environments
:PROPERTIES:
:CUSTOM_ID: personal-envs
:END:

You may create your own Spack Environments and you may use shared Spack Environments provided by your WCWC admin.

Here we will construct and activate a new Spack Environment that is *personal* (not shared).
#+begin_example
$ spack env activate --create --dir my-env
$ echo $SPACK_ENV
/home/bv/my-env
#+end_example

#+begin_note
The ~--dir~ indicates the directory to hold the environment bookkeeping files and it tells Spack that this is a personal environment.

As ~spack env activiate~ modifies your shell environment you must first follow the steps to internalize Spack environment as in section [[#spackify]].
#+end_note

It is now possible to add *previously installed* packages
#+begin_example
$ spack add root
$ spack concretize
$ which root
/home/bv/my-env/.spack-env/view/bin/root
#+end_example

Later, in a fresh shell, we may reactivate the environment by giving the environment directory that was previously created:
#+begin_example
$ spack env activate my-env
$ which root
/home/bv/my-env/.spack-env/view/bin/root
#+end_example


*** Environments and chaining for user installation
:PROPERTIES:
:CUSTOM_ID: user-install-area
:END:


Spack supports "chaining" Spack installations.  A user can employ this feature to install packages that do not exist in the main Spack installation area.  To enable this, modify the ~spack.yaml~ file created in the Spack Environment directory to add ~config~ and ~upstreams~ entry like:

#+begin_src yaml
spack:
  config:
    install_tree:
      root: /home/rootless/junk/my-env/install
    build_stage:
      - /home/rootless/junk/my-env/stage
    source_cache: /home/rootless/junk/my-env/cache
  upstreams:
    base:
      install_tree: /srv/bv/wcwc/spack/base/install
#+end_src
#+begin_note
You will see other entries in the environment's ~spack.yaml~ which were added by ~spack~.  In particular the ~specs~ list will be filled with any package specs named with ~spack add~
#+end_note

You can now install packages and add them to the environment.  For example:
#+begin_example
spack install --add jsonnet
#+end_example


*** Chaining for WCWC software stacks

The WCWC Spack packaging is composed of different Spack "repos".  Each provides packaging for a portion of an overall stack.  Each repo is configured to have its own installation area via a Spack /scope/.  If one repo depends on another it is chained via Spack /upstreams/ mechanism in order to satisfy dependencies.  We saw this same upstream chaining above when configuring the environment with its own ~install_area~.  There, the upstreams consisted of just the "base" installation.

The environment can be constructed on a particular portion the software stack.  For example:
#+begin_example
spack env deactivate   # if needed to exit a prior environment
spack env activate --create --dir my-env-wct
#+end_example

In ~spack.yaml~ we must list the full upstream chain.
#+begin_src yaml
spack:
  upstreams:
    wirecell:
      install_tree: /wcwc/spack/wirecell/install
    base:
      install_tree: /wcwc/spack/base/install
  repos:
  - /wcwc/spack/wirecell/repo
#+end_src
We can then (fake) "install" and add packages provided by the upstream:
#+begin_example
spack install --add wire-cell-toolkit
#+end_example
To install novel package instance not provided by the upstreams, set the other ~config~ items as described in section [[#user-install-area]].


*** Shared environments
:PROPERTIES:
:CUSTOM_ID: shared-envs
:END:

The WCWC admin may define named environments that reside in the central Spack installation area and which may shared by many users.  You may list the names of the available shared environments:
#+begin_example
$ spack env list
==> 1 environments
    wct_0-28-0_glpk-hdf-root
#+end_example
You may activate a shared environment similar to a personal environment by giving its name instead of a directory:
#+begin_example
$ spack env activate wct_0-28-0_glpk-hdf-root
$ echo $SPACK_ENV
/wcwc/spack/local/var/spack/environments/wct_0-28-0_glpk-hdf-root
$ which root
/wcwc/spack/local/var/spack/environments/wct_0-28-0_glpk-hdf-root/.spack-env/view/bin/root
#+end_example

#+begin_note
Shared environments can be useful for end users but their *view* directory is not writable.  A user can not modify shared environments.
#+end_note

* Software development environments
:PROPERTIES:
:CUSTOM_ID: sw-dev-envs
:END:

A Spack Environment can be used to provide a basis for software development as its *view* directory, ie  ~$SPACK_ENV/.spack-env/view~, acts similarly to the traditional Unix ~/usr~ or ~/usr/local~ prefix.  To build a software package under development you may provide this prefix or in many cases rely on packages to be found via ~PKG_CONFIG_PATH~ and ~CMAKE_PREFIX_PATH~ that are set by the Spack Environment activation. 
